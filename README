Who Worked: Rohan Ahluwalia, Edward Frazer

Brief Description of Implementation

Summary: We worked on Project 11: Advanced User-Level Synchronization. We implemented two system calls to facilitate the creation
of user level synchronization objects. On the user level, we implemented semaphores, bounding blocking queues, and ___.

1. System Calls -- All are implemented in TSyscall.c with some auxillary functionality scattered throughout the various syscall layers.
   Specifically, we implement many of the queuing operations in PThread.c
    a. futex() -- This system call empowers a thread queue with WAIT, WAKE, and CMP_REQUEUE operations. Due to the 6 argument limit
    in our system call API, we reduced some of the functionality such as timeouts and max number of threads requeued and require that
    user level calls implement them instead.
    b. memshare() -- This system call allows the calling thread to share a page with a target thread with read & write permissions. It
    allows user processes to operate in shared memory space and thus to make use of futexes directly.

2. User Level Implementation
